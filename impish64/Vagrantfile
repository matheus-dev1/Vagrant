Vagrant.configure("2") do |config|
  #Configuração da(s) maquina(s).
  config.vm.box = "ubuntu/impish64"

  #Definindo configurações das nossas maquinas virtuais.
  config.vm.provider "virtualbox" do |vb|
    vb.memory = 512 #Megas
    vb.cpus = 1 #Processador(s)
  end

  #Vai abrir uma nova interface grafica com a instancia da maquina com o seu provider, no meu caso o VirtualBox
  config.vm.provider :virtualbox do |virtualbox|
    virtualbox.gui = true
  end

  #Aqui estou definindo uma maquina virtual com as configurações a box "ubuntu/impish64"
  config.vm.define "mysql_machine" do |mysql_machine|
    #Na minha maquina virtual(guest) está configurada para rodar um servidor nginx na porta 80
    #e no meu Windows(maquina local), vou usar a porta 8081 para se conectar.
    #mysql_machine.vm.network "forwarded_port", guest: 80, host: 8081

    #Configuração de um IP estático do tipo Publico.
    #config.vm.network "public_network", ip: "192.168.50.4"
    #Configuração de um IP estático do tipo Privado. 
    mysql_machine.vm.network "private_network", ip: "192.168.50.4"

    #config.vm.network "private_network", type: "dhcp"
    #config.vm.network "public_network"

    #Executando comando shell, atraves deste provisionamento do tipo Shell.
    mysql_machine.vm.provision "shell", inline: "echo Hello, World"

    #Pegando os comandos dos arquivo script.sh
    mysql_machine.vm.provision "shell", path: "script.sh"

    #Desabilitando a "Synced Folder" /vagrant
    mysql_machine.vm.synced_folder ".", "/vagrant", disabled: true

    #Criando uma "Synced Folder"
    mysql_machine.vm.synced_folder "./configs/", "/configs"
  end

  config.vm.define "php_machine" do |php_machine|
    #Não tem problema o guest e o host posuirem o mesmo numero de porta.
    php_machine.vm.network "forwarded_port", guest: 8888, host: 8888
    php_machine.vm.network "private_network", ip: "192.168.50.5"
    php_machine.vm.provider "virtualbox" do |vb|
      vb.memory = 1024
      vb.cpus = 2
      vb.name = "ubuntu_bionic_php" #Definindo o nome desta maquina provisionada pelo Virtual Box
    end
    #Instalando o Puppet nesta maquina.
    php_machine.vm.provision "shell", inline: "sudo apt-get update && apt-get install -y puppet"
    #Aqui eu vou integrar o puppet com o Vagrant, fazendo com que ele execute este arquivo php_mchine.pp
    php_machine.vm.provision "puppet" do |puppet|
      #Caminho do arquivo .pp
      puppet.manifests_path = "./configs/manifests"
      #Arquivo .pp em si
      puppet.manifest_file = "php_machine.pp"
    end
  end

  #Maquina para configurar o MySQL a partir do provisionador Ansible.
  config.vm.define "mysqlserver" do |mysqlserver|
    mysqlserver.vm.network "private_network", ip: "192.168.50.6"
    mysqlserver.vm.provision "shell", path: "script-mysqlserver.sh"
  end

  #Maquina para instalar o Ansilbe
  config.vm.define "ansible" do |ansible|
    ansible.vm.network "private_network", ip: "192.168.50.2"
    ansible.vm.provision "shell", path: "script-ansible.sh"
  end

  #Maquina de testes.
  config.vm.define "test_machine" do |test_machine|
  end

  config.vm.define "memcached" do |memcached|
    memcached.vm.box = "centos/7" #Eu posso definir um box para uma maquina especifica.
    memcached.vm.provider "virtualbox" do |vb|
      vb.memory = 1024
      vb.cpus = 2
      vb.name = "centos7_memcached"
    end
  end

  #Virtualização de uma maquina para usar o Docker nesta maquina.
  config.vm.define "dockerhost" do |dockerhost|
    dockerhost.vm.provider "virtualbox" do |vb|
      vb.memory = 512
      vb.cpus = 1
      vb.name = "ubuntu_dockerhost"
    end
    dockerhost.vm.provision "shell", inline: "apt-get update && apt-get install -y docker.io"
  end
end